<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itycu.server.dao.BudgetDataDao">


    <sql id="budgetData">
      `id` ,
      `budget_data_id` as budgetDataId,
      `userId` ,
      `apply_dept_id` as applyDeptId ,
      `apply_dept_name` as applyDeptName ,
      `gl_dept_id` as glDeptId ,
      `gl_dept_name` as glDeptName ,
      `applyTime` as applyTime ,
      `flowid`
      `stepid` ,
      `status` ,
      `budget_kind` as budgetKind,
      `del` ,
      `create_time` as createTime ,
      `update_time` as updateTime ,
      `filename` ,
      `fileurl` ,
      `opinion` ,
      `mark` ,
      `data_c01` as dataC01 ,
      `data_c02` as dataC02,
      `data_c03`
    </sql>


    <sql id="budgetDataItem">
       `id` ,
      `budget_data_id` as budgetDataId ,
      `budget_period` as budgetPeriod ,
      `budget_type` as budgetType ,
      `budget_kind` as budgetKind ,
      `budget_num` as budgetNum ,
      `budget_price` as budgetPrice ,
      `property` ,
      `budget_unit` as budgetUnit ,
      `budget_money` as budgetMoney ,
      `budget_manager_dept_id` as budgetManagerDeptId ,
      `budget_manager_name` as budgetManagerName,
      `brand` ,
      `model` ,
      `file_url` fileUrl,
      `remark` ,
      `create_time`  createTime,
      `update_time` updateTime,
      `budget_status`  budgetStatus,
      `budget_dept_id`  budgetDeptId,
      `budget_dept_name` budgetDeptName,
      `budget_c01` budgetC01,
      `budget_c02` budgetC02,
      `budget_c03` budgetC03
    </sql>


    <sql id="where">
        <where>
            <if test="params.id != null and params.id != ''">
                and t.id = #{params.id}
            </if>
            <if test="params.budgetBuyNum != null and params.budgetBuyNum != ''">
                and t.budgetBuyNum = #{params.budgetBuyNum}
            </if>
            <if test="params.userId != null and params.userId != ''">
                and t.userId = #{params.userId}
            </if>
            <if test="params.applyDeptId != null and params.applyDeptId != ''">
                and t.applyDeptId = #{params.applyDeptId}
            </if>
            <if test="params.applyTime != null and params.applyTime != ''">
                and t.applyTime = #{params.applyTime}
            </if>
            <if test="params.flowid != null and params.flowid != ''">
                and t.flowid = #{params.flowid}
            </if>
            <if test="params.stepid != null and params.stepid != ''">
                and t.stepid = #{params.stepid}
            </if>
            <if test="params.status != null and params.status != ''">
                and t.status = #{params.status}
            </if>
            <if test="params.type != null and params.type != ''">
                and t.type = #{params.type}
            </if>
            <if test="params.del != null and params.del != ''">
                and t.del = #{params.del}
            </if>
            <if test="params.createTime != null and params.createTime != ''">
                and t.createTime = #{params.createTime}
            </if>
            <if test="params.updateTime != null and params.updateTime != ''">
                and t.updateTime = #{params.updateTime}
            </if>

        </where>
    </sql>

    <insert id="saveBudgetDataInfo" useGeneratedKeys="true" keyProperty="id">
			INSERT INTO `budget_data` (
			`budget_data_id`,
			`userId`,
			`apply_dept_id`,
			`apply_dept_name`,
			`applyTime`,
			`flowid`,
			`stepid`,
			`status`,
			`budget_kind`,
			`del`,
		     filename,
		     fileurl,
		     gl_dept_id,
		     gl_dept_name,
			`create_time`,
			`update_time` )
			VALUES
			(
			#{budgetData.budgetDataId},
			#{budgetData.userId},
			#{budgetData.applyDeptId},
			#{budgetData.applyDeptName},
			now(),
			#{budgetData.flowid},
			#{budgetData.stepid},
			0,
			#{budgetData.budgetKind},
			0,
			#{budgetData.fileName},
			#{budgetData.fileUrl},
			#{budgetData.glDeptId},
			#{budgetData.glDeptName},
			now(),
			now());
	</insert>


    <insert id="saveBudgetDataItemInfo" parameterType="list">
        INSERT INTO
        `budget_data_item` (
        `budget_data_id`,
        `budget_period`,
        `budget_type`,
        `budget_kind`,
        `budget_num`,
        `budget_price`,
        `property`,
        `budget_unit`,
        `budget_money`,
        `budget_manager_dept_id`,
        `budget_manager_name`,
        `brand`,
        `model`,
        `file_url`,
        `remark`,
        `create_time`,
        `update_time`,
        `budget_status`,
        `budget_dept_id`,
        `budget_dept_name`,
        `budget_c01`,
        `budget_c02`,
        `budget_c03`
        )
        VALUES
        <foreach collection="list" item="item" index="index" separator=",">
            (
            #{item.budgetDataId},
            #{item.budgetPeriod},
            #{item.budgetType},
            #{item.budgetKind},
            #{item.budgetNum},
            #{item.budgetPrice},
            #{item.property},
            #{item.budgetUnit},
            #{item.budgetMoney},
            #{item.budgetManagerDeptId},
            #{item.budgetManagerName},
            #{item.brand},
            #{item.model},
            #{item.fileUrl},
            #{item.remark},
            now(),
            now(),
            0,
            #{item.budgetDeptId},
            #{item.budgetDeptName},
            #{item.budgetC01},
            #{item.budgetC02},
            #{item.budgetC03}
            )
        </foreach>
    </insert>


    <select id="countBudgetRecord" resultType="java.lang.Integer">
        select count(*) from budget_data
        <include refid="where"/>
    </select>


    <select id="queryBudgetRecordList"  parameterType="map" resultType="java.util.Map">
        select
        <include refid="budgetData"/>
        from budget_data
        <include refid="where"/>
        order by create_time desc
        limit #{offset}, #{limit}
    </select>


    <select id="budgetItemRecordListById" parameterType="map" resultType="java.util.Map">
        select
        <include refid="budgetDataItem"/>
        from budget_data as data
        left join budget_data_item as item
        on data.budget_kind = item.budget_data_id
        where data.id = #{id}
        order by create_time desc
        limit #{offset}, #{limit}
    </select>

</mapper>
